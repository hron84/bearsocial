require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe UsersController do

  # This should return the minimal set of attributes required to create a valid
  # User. As you add validations to User, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    {
      :name => 'John Doe',
      :email => 'john@example.com',
      :password => 'secret',
      :password_confirmation => 'secret',
    }
  end


  before(:each) do
    @user = Factory.create(:user)
    @user.should be_confirmed
    
    @friend = Factory.create(:user)

    sign_in :user, @user
    request.env['HTTP_REFERER'] = root_url
  end

  describe "PUT follow" do
    it "should add user as a follower to the friend" do
      expect do
        put :follow, { :id => @friend.to_param }
      end.to change(@friend.followers, :count).by(1)
    end

    it "should not add friend as a follower to the user" do
      expect do
        put :follow, { :id => @friend.to_param }
      end.to_not change(@user.followers, :count).by(1)
    end
  end

  describe "PUT unfollow" do
    before do
      @user.followings.create!(:followed_id => @friend.id)
    end

    it "should removes friend from followers" do
      expect do
        put :unfollow, { :id => @friend.to_param }
      end.to change(@friend.followers, :count).by(-1)
    end
  end
end
